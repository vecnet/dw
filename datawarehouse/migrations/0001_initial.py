# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-04-30 20:12
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DimDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'dim_date',
            },
        ),
        migrations.CreateModel(
            name='DimLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin007', models.CharField(blank=True, max_length=255, null=True)),
                ('admin0', models.CharField(blank=True, max_length=255, null=True)),
                ('admin1', models.CharField(blank=True, max_length=255, null=True)),
                ('admin2', models.CharField(blank=True, max_length=255, null=True)),
                ('admin3', models.CharField(blank=True, max_length=255, null=True)),
                ('geom_key', models.IntegerField()),
            ],
            options={
                'db_table': 'dim_location',
                'verbose_name': 'DimLocation',
                'verbose_name_plural': 'DimLocations',
            },
        ),
        migrations.CreateModel(
            name='DimSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(max_length=255)),
                ('file_uid', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'dim_source',
            },
        ),
        migrations.CreateModel(
            name='DimSubgroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subgroup', models.TextField()),
            ],
            options={
                'db_table': 'dim_subgroup',
            },
        ),
        migrations.CreateModel(
            name='DimType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'dim_type',
            },
        ),
        migrations.CreateModel(
            name='DimUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=30, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=30, null=True)),
                ('last_name', models.CharField(blank=True, max_length=30, null=True)),
                ('organization', models.TextField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': 'dim_user',
            },
        ),
        migrations.CreateModel(
            name='DimWeatherStation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_key', models.IntegerField()),
                ('station_number', models.CharField(blank=True, max_length=255)),
                ('station_name', models.CharField(blank=True, max_length=255)),
                ('station_location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'dim_weather_station',
            },
        ),
        migrations.CreateModel(
            name='FactDemographics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('yrs_0_4', models.IntegerField(blank=True, null=True)),
                ('yrs_5_9', models.IntegerField(blank=True, null=True)),
                ('yrs_10_14', models.IntegerField(blank=True, null=True)),
                ('yrs_15_19', models.IntegerField(blank=True, null=True)),
                ('yrs_20_24', models.IntegerField(blank=True, null=True)),
                ('yrs_25_29', models.IntegerField(blank=True, null=True)),
                ('yrs_30_34', models.IntegerField(blank=True, null=True)),
                ('yrs_35_39', models.IntegerField(blank=True, null=True)),
                ('yrs_40_44', models.IntegerField(blank=True, null=True)),
                ('yrs_45_49', models.IntegerField(blank=True, null=True)),
                ('yrs_50_54', models.IntegerField(blank=True, null=True)),
                ('yrs_55_59', models.IntegerField(blank=True, null=True)),
                ('yrs_60_64', models.IntegerField(blank=True, null=True)),
                ('yrs_65_69', models.IntegerField(blank=True, null=True)),
                ('yrs_70_74', models.IntegerField(blank=True, null=True)),
                ('yrs_75_79', models.IntegerField(blank=True, null=True)),
                ('yrs_80plus', models.IntegerField(blank=True, null=True)),
                ('date_key', models.ForeignKey(db_column=b'date_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimDate')),
                ('location_key', models.ForeignKey(db_column=b'location_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimLocation')),
                ('source_key', models.ForeignKey(db_column=b'source_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimSource')),
                ('user_key', models.ForeignKey(db_column=b'user_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimUser')),
            ],
            options={
                'db_table': 'fact_demographics',
            },
        ),
        migrations.CreateModel(
            name='FactGrossNationalIncome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gross_national_income', models.DecimalField(blank=True, decimal_places=2, max_digits=100, null=True)),
                ('date_key', models.ForeignKey(blank=True, db_column=b'date_key', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='FactGrossNationalIncome_date_key', to='datawarehouse.DimDate')),
                ('end_date_key', models.ForeignKey(blank=True, db_column=b'end_date_key', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='FactGrossNationalIncome_end_date_key', to='datawarehouse.DimDate')),
                ('location_key', models.ForeignKey(blank=True, db_column=b'location_key', null=True, on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimLocation')),
                ('user_key', models.ForeignKey(db_column=b'user_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimUser')),
            ],
            options={
                'db_table': 'fact_gross_national_income',
            },
        ),
        migrations.CreateModel(
            name='FactHouseholds',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_houses', models.IntegerField(blank=True, null=True)),
                ('date_key', models.ForeignKey(blank=True, db_column=b'date_key', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='FactHouseholds_date_key', to='datawarehouse.DimDate')),
                ('end_date_key', models.ForeignKey(blank=True, db_column=b'end_date_key', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='FactHouseholds_end_date_key', to='datawarehouse.DimDate')),
                ('location_key', models.ForeignKey(blank=True, db_column=b'location_key', null=True, on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimLocation')),
                ('source_key', models.ForeignKey(blank=True, db_column=b'source_key', null=True, on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimSource')),
                ('subgroup_key', models.ForeignKey(blank=True, db_column=b'subgroup_key', null=True, on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimSubgroup')),
                ('user_key', models.ForeignKey(db_column=b'user_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimUser')),
            ],
            options={
                'db_table': 'fact_households',
            },
        ),
        migrations.CreateModel(
            name='FactPacrainRainfall',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('beg_obs_date_key', models.IntegerField()),
                ('end_obs_date_key', models.IntegerField()),
                ('last_mod_date_key', models.IntegerField()),
                ('length_of_obs', models.IntegerField(blank=True, null=True)),
                ('rainfall_amount', models.FloatField(blank=True, null=True)),
                ('data_flags', models.IntegerField(blank=True, null=True)),
                ('record_ident', models.TextField(blank=True)),
                ('user_key', models.IntegerField()),
                ('source_key', models.IntegerField()),
                ('location_key', models.IntegerField()),
            ],
            options={
                'db_table': 'fact_pacrain_rainfall',
            },
        ),
        migrations.CreateModel(
            name='FactWeather',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mean_temp', models.FloatField(blank=True, null=True)),
                ('mean_temp_obs_cnt', models.IntegerField(blank=True, null=True)),
                ('mean_dewpnt', models.FloatField(blank=True, null=True)),
                ('mean_dewpnt_obs_cnt', models.IntegerField(blank=True, null=True)),
                ('mean_sl_press', models.FloatField(blank=True, null=True)),
                ('mean_sl_press_obs_cnt', models.IntegerField(blank=True, null=True)),
                ('mean_station_press', models.FloatField(blank=True, null=True)),
                ('mean_station_press_obs_cnt', models.IntegerField(blank=True, null=True)),
                ('mean_vis', models.FloatField(blank=True, null=True)),
                ('mean_vis_obs_cnt', models.IntegerField(blank=True, null=True)),
                ('mean_wind_spd', models.FloatField(blank=True, null=True)),
                ('mean_wind_spd_obs_cnt', models.IntegerField(blank=True, null=True)),
                ('max_sus_wind_spd', models.FloatField(blank=True, null=True)),
                ('max_wind_gust', models.FloatField(blank=True, null=True)),
                ('max_temp', models.FloatField(blank=True, null=True)),
                ('min_temp', models.FloatField(blank=True, null=True)),
                ('total_precip', models.FloatField(blank=True, null=True)),
                ('snow_depth', models.FloatField(blank=True, null=True)),
                ('fog_ind', models.NullBooleanField()),
                ('rain_drizz_ind', models.NullBooleanField()),
                ('snow_ice_pell_ind', models.NullBooleanField()),
                ('hail_ind', models.NullBooleanField()),
                ('thunder_ind', models.NullBooleanField()),
                ('tornade_funnel_ind', models.NullBooleanField()),
                ('source_key', models.IntegerField()),
                ('date_key', models.ForeignKey(db_column=b'date_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimDate')),
                ('location_key', models.ForeignKey(db_column=b'location_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimLocation')),
                ('user_key', models.ForeignKey(db_column=b'user_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimUser')),
                ('weather_station_key', models.ForeignKey(blank=True, db_column=b'weather_station_key', null=True, on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimWeatherStation')),
            ],
            options={
                'db_table': 'fact_weather',
            },
        ),
        migrations.CreateModel(
            name='FactWmrActOprtnlCvrg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('any_1st_trtmnt_crses_dlvrd_incldng_act', models.FloatField(blank=True, null=True)),
                ('act_trtmnt_crses_dlvrd', models.FloatField(blank=True, null=True)),
                ('pcnt_any_am_cvrg_total', models.FloatField(blank=True, null=True)),
                ('pcnt_act_cvrg_total', models.FloatField(blank=True, null=True)),
                ('date_key', models.ForeignKey(db_column=b'date_key', on_delete=django.db.models.deletion.CASCADE, related_name='FactWmrActOprtnlCvrg_date_key', to='datawarehouse.DimDate')),
                ('end_date_key', models.ForeignKey(db_column=b'end_date_key', on_delete=django.db.models.deletion.CASCADE, related_name='FactWmrActOprtnlCvrg_end_date_key', to='datawarehouse.DimDate')),
                ('location_key', models.ForeignKey(db_column=b'location_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimLocation')),
                ('source_key', models.ForeignKey(db_column=b'source_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimSource')),
                ('user_key', models.ForeignKey(db_column=b'user_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimUser')),
            ],
            options={
                'db_table': 'fact_wmr_act_oprtnl_cvrg',
            },
        ),
        migrations.CreateModel(
            name='FactWmrHhSurveys',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pcnt_hh_gte1_anet', models.FloatField(blank=True, null=True)),
                ('pcnt_hh_gte1_etn', models.FloatField(blank=True, null=True)),
                ('pcnt_hh_gte1_itn', models.FloatField(blank=True, null=True)),
                ('pcnt_total_pop_itn', models.FloatField(blank=True, null=True)),
                ('pcnt_chldrn_lt5_anet', models.FloatField(blank=True, null=True)),
                ('pcnt_chldrn_lt5_etn', models.FloatField(blank=True, null=True)),
                ('pcnt_chldrn_lt5_itn', models.FloatField(blank=True, null=True)),
                ('pcnt_preg_anet', models.FloatField(blank=True, null=True)),
                ('pcnt_preg_etn', models.FloatField(blank=True, null=True)),
                ('pcnt_preg_itn', models.FloatField(blank=True, null=True)),
                ('date_key', models.ForeignKey(db_column=b'date_key', on_delete=django.db.models.deletion.CASCADE, related_name='FactWmrHhSurveys_date_key', to='datawarehouse.DimDate')),
                ('end_date_key', models.ForeignKey(db_column=b'end_date_key', on_delete=django.db.models.deletion.CASCADE, related_name='FactWmrHhSurveys_end_date_key', to='datawarehouse.DimDate')),
                ('location_key', models.ForeignKey(db_column=b'location_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimLocation')),
                ('source_key', models.ForeignKey(db_column=b'source_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimSource')),
                ('subgroup_key', models.ForeignKey(db_column=b'subgroup_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimSubgroup')),
                ('user_key', models.ForeignKey(db_column=b'user_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimUser')),
            ],
            options={
                'db_table': 'fact_wmr_hh_surveys',
            },
        ),
        migrations.CreateModel(
            name='FactWmrIrsOprtnlCvrg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nmbr_protected_irs', models.FloatField(blank=True, null=True)),
                ('pcnt_irs_cvrg', models.FloatField(blank=True, null=True)),
                ('date_key', models.ForeignKey(db_column=b'date_key', on_delete=django.db.models.deletion.CASCADE, related_name='FactWmrIrsOprtnlCvrg_date_key', to='datawarehouse.DimDate')),
                ('end_date_key', models.ForeignKey(db_column=b'end_date_key', on_delete=django.db.models.deletion.CASCADE, related_name='FactWmrIrsOprtnlCvrg_end_date_key', to='datawarehouse.DimDate')),
                ('location_key', models.ForeignKey(db_column=b'location_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimLocation')),
                ('source_key', models.ForeignKey(db_column=b'source_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimSource')),
                ('user_key', models.ForeignKey(db_column=b'user_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimUser')),
            ],
            options={
                'db_table': 'fact_wmr_irs_oprtnl_cvrg',
            },
        ),
        migrations.CreateModel(
            name='FactWmrItnOprtnlCvrg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nmbr_llin_sold_dlvrd', models.FloatField(blank=True, null=True)),
                ('nmbr_itn_sold_dlvrd', models.FloatField(blank=True, null=True)),
                ('nmbr_itn_and_llin_sold_dlvrd', models.FloatField(blank=True, null=True)),
                ('pcnt_itn_cvrg', models.FloatField(blank=True, null=True)),
                ('date_key', models.ForeignKey(db_column=b'date_key', on_delete=django.db.models.deletion.CASCADE, related_name='FactWmrItnOprtnlCvrg_date_key', to='datawarehouse.DimDate')),
                ('end_date_key', models.ForeignKey(db_column=b'end_date_key', on_delete=django.db.models.deletion.CASCADE, related_name='FactWmrItnOprtnlCvrg_end_date_key', to='datawarehouse.DimDate')),
                ('location_key', models.ForeignKey(db_column=b'location_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimLocation')),
                ('source_key', models.ForeignKey(db_column=b'source_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimSource')),
                ('user_key', models.ForeignKey(db_column=b'user_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimUser')),
            ],
            options={
                'db_table': 'fact_wmr_itn_oprtnl_cvrg',
            },
        ),
        migrations.CreateModel(
            name='GisBaseTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('s_name', models.CharField(max_length=100)),
                ('s_desc', models.TextField(blank=True, null=True)),
                ('admin_level', models.IntegerField()),
            ],
            options={
                'db_table': 'gis_base_table',
            },
        ),
        migrations.CreateModel(
            name='LutEntomologicalEndpoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paradigms', models.CharField(blank=True, max_length=255)),
                ('product_description', models.TextField(blank=True)),
                ('impact_human_landing_rates', models.CharField(blank=True, max_length=255)),
                ('impact_direct_mortality', models.CharField(blank=True, max_length=255)),
                ('impact_vector_mosquito_abundance_in_treated_area', models.CharField(blank=True, max_length=255)),
                ('movement_away_from_a_point_source', models.CharField(blank=True, max_length=255)),
                ('impact_rate_of_entry_into_treated_area', models.CharField(blank=True, max_length=255)),
                ('impact_exit_rate_from_treated_area', models.CharField(blank=True, max_length=255)),
                ('impact_percent_of_blood_fed', models.CharField(blank=True, max_length=255)),
                ('impact_number_or_percent_of_blood_fed', models.CharField(blank=True, max_length=255)),
                ('impact_sporozoite_rate', models.CharField(blank=True, max_length=255)),
                ('impact_number_of_gravid_and_parous_females', models.CharField(blank=True, max_length=255)),
                ('impact_rate_of_inhibition_of_adult_emergence', models.CharField(blank=True, max_length=255)),
                ('possess_the_desired_trait', models.CharField(blank=True, max_length=255)),
                ('establishment_within_a_cage_population', models.CharField(blank=True, max_length=255)),
                ('mating_competitiveness', models.CharField(blank=True, max_length=255)),
                ('duration_of_effective_life_or_replacement_time', models.CharField(blank=True, max_length=255)),
                ('number_of_new_infections_among_human_cohort', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'lut_entomological_endpoint',
            },
        ),
        migrations.CreateModel(
            name='LutIntervention',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intervention_name', models.TextField(blank=True)),
                ('abbreviation', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('synonyms', models.TextField(blank=True)),
                ('source_key', models.ForeignKey(db_column=b'source_key', on_delete=django.db.models.deletion.CASCADE, to='datawarehouse.DimSource')),
            ],
            options={
                'db_table': 'lut_intervention',
            },
        ),
        migrations.CreateModel(
            name='LutInterventionIrsCoveragesAdmin1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gaul_code', models.IntegerField()),
                ('country', models.TextField()),
                ('province_name', models.TextField()),
                ('percent_of_the_population_protected_by_irs', models.FloatField()),
                ('year', models.IntegerField()),
                ('source', models.TextField()),
                ('source_url', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lut_intervention_irs_coverage_admin1',
            },
        ),
        migrations.CreateModel(
            name='LutInterventionItnCoveragesAdmin1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gaul_code', models.IntegerField()),
                ('country', models.TextField()),
                ('province_name', models.TextField()),
                ('percent_of_children_under_5_years_sleeping_under_a_bednet', models.FloatField(blank=True, null=True)),
                ('the_estimated_percent_households_with_itn', models.FloatField(blank=True, null=True)),
                ('percent_itn_all', models.FloatField(blank=True, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('source', models.TextField()),
                ('source_url', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lut_intervention_itn_coverage_admin1',
            },
        ),
        migrations.CreateModel(
            name='LutMapSiteid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('map_site_id', models.IntegerField()),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=4326)),
            ],
            options={
                'db_table': 'lut_map_siteid',
            },
        ),
        migrations.CreateModel(
            name='LutRepresentativeWorkflowParameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('species', models.CharField(blank=True, max_length=255)),
                ('larval_habitat', models.CharField(blank=True, max_length=255)),
                ('indoor_feeding_fraction', models.CharField(blank=True, max_length=255)),
                ('average_daily_biting_rate', models.CharField(blank=True, max_length=255)),
                ('anthropophily', models.CharField(blank=True, max_length=255)),
                ('adult_life_expectancy', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'lut_repr_workflow_parameters',
            },
        ),
        migrations.CreateModel(
            name='LutSpecies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('species', models.CharField(blank=True, max_length=255)),
                ('form', models.CharField(blank=True, max_length=255)),
                ('vector_status', models.CharField(blank=True, max_length=255)),
                ('daily_adult_survival_rate', models.CharField(blank=True, max_length=255)),
                ('larval_survival_rate', models.CharField(blank=True, max_length=255)),
                ('indoor_feeding_rate', models.CharField(blank=True, max_length=255)),
                ('human_blood_index', models.CharField(blank=True, max_length=255)),
                ('peak_biting_time', models.CharField(blank=True, max_length=255)),
                ('length_of_feeding_cycle', models.CharField(blank=True, max_length=255)),
                ('form_of_larval_habitat', models.CharField(blank=True, max_length=255)),
                ('pre_feeding_resting_habits', models.CharField(blank=True, max_length=255)),
                ('post_feeding_resting_habits', models.CharField(blank=True, max_length=255)),
                ('flight_range', models.CharField(blank=True, max_length=255)),
                ('sugar_meal_frequency', models.CharField(blank=True, max_length=255)),
                ('sugar_sources', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'lut_species',
            },
        ),
        migrations.CreateModel(
            name='LutVectorSpeciesParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('species', models.CharField(blank=True, max_length=255)),
                ('acquire_modifier', models.CharField(blank=True, max_length=255)),
                ('adult_life_expectancy', models.CharField(blank=True, max_length=255)),
                ('anthropophily', models.CharField(blank=True, max_length=255)),
                ('transmission_rate', models.CharField(blank=True, max_length=255)),
                ('habitat_type', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'lut_vector_species_parameter',
            },
        ),
        migrations.CreateModel(
            name='LutVectorSpeciesSensitivityParams',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('species', models.CharField(blank=True, max_length=255)),
                ('immature_duration', models.CharField(blank=True, default=b'2', max_length=255)),
                ('indoor_feeding_fraction', models.CharField(blank=True, max_length=255)),
                ('infected_arrhenius_1', models.CharField(blank=True, default=b'117+e9', max_length=255)),
                ('infected_arrhenius_2', models.CharField(blank=True, default=b'8336', max_length=255)),
                ('infected_egg_batch_factor', models.CharField(blank=True, default=b'0.8', max_length=255)),
                ('infectious_human_feed_mortality_factor', models.CharField(blank=True, default=b'1.1', max_length=255)),
                ('aquatic_arrhenius_1', models.CharField(blank=True, default=b'842e+8', max_length=255)),
                ('aquatic_arrhenius_2', models.CharField(blank=True, default=b'8250', max_length=255)),
                ('aquatic_mortality_rate', models.CharField(blank=True, default=b'0.1', max_length=255)),
                ('days_between_feeds', models.CharField(blank=True, default=b'2', max_length=255)),
                ('egg_batch_size', models.CharField(blank=True, default=b'120', max_length=255)),
            ],
            options={
                'db_table': 'lut_vector_sensitivity_parameters',
            },
        ),
        migrations.AlterUniqueTogether(
            name='lutinterventionitncoveragesadmin1',
            unique_together=set([('country', 'province_name', 'year')]),
        ),
        migrations.AlterUniqueTogether(
            name='lutinterventionirscoveragesadmin1',
            unique_together=set([('country', 'province_name', 'year')]),
        ),
    ]
